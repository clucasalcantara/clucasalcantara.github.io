{
  "remainingRequest": "/Users/clucasalcantara/projects/open-source/clucasalcantara.github.io/node_modules/docz/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"/Users/clucasalcantara/projects/open-source/clucasalcantara.github.io/node_modules/docz/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[[\"/Users/clucasalcantara/projects/open-source/clucasalcantara.github.io/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"/Users/clucasalcantara/projects/open-source/clucasalcantara.github.io/node_modules/docz/node_modules/react-hot-loader/babel.js\"],\"babelrc\":false,\"cacheCompression\":false,\"compact\":false}!/Users/clucasalcantara/projects/open-source/clucasalcantara.github.io/src/services/unsplash/index.js",
  "dependencies": [
    {
      "path": "/Users/clucasalcantara/projects/open-source/clucasalcantara.github.io/src/services/unsplash/index.js",
      "mtime": 1553597225804
    },
    {
      "path": "/Users/clucasalcantara/projects/open-source/clucasalcantara.github.io/node_modules/docz/node_modules/cache-loader/dist/cjs.js",
      "mtime": 1553357715411
    },
    {
      "path": "/Users/clucasalcantara/projects/open-source/clucasalcantara.github.io/node_modules/docz/node_modules/babel-loader/lib/index.js",
      "mtime": 1553357715290
    }
  ],
  "contextDependencies": [],
  "result": [
    "import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\n(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport Unsplash from 'unsplash-js';\nvar unsplash = new Unsplash({\n  applicationId: '56ef0262b44c0f3a1ee9a4576c4f35105325aa1d21e18b78132355dd89ebec47',\n  secret: '013bb4b541a0fa9e3070d93d847181aed0e36ca96d71f210b51825947b5d958e'\n});\n\nvar getRandomImage =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(cb) {\n    var query,\n        image,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            query = _args.length > 1 && _args[1] !== undefined ? _args[1] : 'drone';\n            _context.next = 3;\n            return unsplash.photos.getRandomPhoto({\n              query: query\n            }).then(function (response) {\n              return response.json();\n            }).then(function (data) {\n              return data;\n            });\n\n          case 3:\n            image = _context.sent;\n\n            if (!image.urls) {\n              _context.next = 6;\n              break;\n            }\n\n            return _context.abrupt(\"return\", cb(image));\n\n          case 6:\n            return _context.abrupt(\"return\", null);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  return function getRandomImage(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport { getRandomImage };\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(unsplash, \"unsplash\", \"/Users/clucasalcantara/projects/open-source/clucasalcantara.github.io/src/services/unsplash/index.js\");\n  reactHotLoader.register(getRandomImage, \"getRandomImage\", \"/Users/clucasalcantara/projects/open-source/clucasalcantara.github.io/src/services/unsplash/index.js\");\n  leaveModule(module);\n})();\n\n;",
    {
      "version": 3,
      "sources": [
        "/Users/clucasalcantara/projects/open-source/clucasalcantara.github.io/src/services/unsplash/index.js"
      ],
      "names": [
        "Unsplash",
        "unsplash",
        "applicationId",
        "secret",
        "getRandomImage",
        "cb",
        "query",
        "photos",
        "getRandomPhoto",
        "then",
        "response",
        "json",
        "data",
        "image",
        "urls"
      ],
      "mappings": ";;;;;;;;;;;;AAAA,OAAOA,QAAP,MAAqB,aAArB;AAEA,IAAMC,QAAQ,GAAG,IAAID,QAAJ,CAAa;AAC5BE,EAAAA,aAAa,EACX,kEAF0B;AAG5BC,EAAAA,MAAM,EAAE;AAHoB,CAAb,CAAjB;;AAMA,IAAMC,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG,iBAAOC,EAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAWC,YAAAA,KAAX,2DAAmB,OAAnB;AAAA;AAAA,mBACDL,QAAQ,CAACM,MAAT,CACjBC,cADiB,CACF;AAAEF,cAAAA,KAAK,EAALA;AAAF,aADE,EAEjBG,IAFiB,CAEZ,UAAAC,QAAQ;AAAA,qBAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,aAFI,EAGjBF,IAHiB,CAGZ,UAAAG,IAAI;AAAA,qBAAIA,IAAJ;AAAA,aAHQ,CADC;;AAAA;AACfC,YAAAA,KADe;;AAAA,iBAMjBA,KAAK,CAACC,IANW;AAAA;AAAA;AAAA;;AAAA,6CAOZT,EAAE,CAACQ,KAAD,CAPU;;AAAA;AAAA,6CAUd,IAVc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAdT,cAAc;AAAA;AAAA;AAAA,GAApB;;AAaA,SAASA,cAAT;;;;;;;;;;;;0BAnBMH,Q;0BAMAG,c",
      "sourcesContent": [
        "import Unsplash from 'unsplash-js'\n\nconst unsplash = new Unsplash({\n  applicationId:\n    '56ef0262b44c0f3a1ee9a4576c4f35105325aa1d21e18b78132355dd89ebec47',\n  secret: '013bb4b541a0fa9e3070d93d847181aed0e36ca96d71f210b51825947b5d958e'\n})\n\nconst getRandomImage = async (cb, query = 'drone') => {\n  const image = await unsplash.photos\n    .getRandomPhoto({ query })\n    .then(response => response.json())\n    .then(data => data)\n\n  if (image.urls) {\n    return cb(image)\n  }\n\n  return null\n}\n\nexport { getRandomImage }\n"
      ]
    }
  ]
}
